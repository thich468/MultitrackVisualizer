<jittershader name="stripes">
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="texcoord" type="vec2" state="TEXCOORD" />
    <param name="iResolution" type="vec2" state="TEXDIM0" />
    <param name="iMouse" type="vec4" default="0 0 0 0" />
    <param name="iTime" type="float" default="0" />
	<param name="dummytex" type="int" default="0" />
	<param name="iChannel0" type="int" default="1" />
	<param name="iChannel1" type="int" default="2" />
	<param name="iChannel2" type="int" default="3" />
    <param name="iChannel3" type="int" default="4" />
	<param name="r" type="float" default="0.0" />
	<param name="g" type="float" default="0.0" />
	<param name="b" type="float" default="0.0" />
    
    <language name="glsl" version="1.5">
        <bind param="modelViewProjectionMatrix" program="vp" />
        <bind param="textureMatrix0" program="vp" />
        <bind param="position" program="vp" />
        <bind param="texcoord" program="vp" />
        <bind param="iTime" program="fp" />
        <bind param="iMouse" program="fp" />
        <bind param="iResolution" program="fp" />
		<bind param="dummytex" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />
		<bind param="iChannel2" program="fp" />
        <bind param="iChannel3" program="fp" />
		<bind param="r" program="fp" />
		<bind param="g" program="fp" />
		<bind param="b" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>      
        <program name="fp" type="fragment"  >
        <![CDATA[
            #version 330 core
            
            in jit_PerVertex {
                vec2 texcoord;
            } jit_in;
            out vec4 outColor;

            uniform float iTime;
            uniform vec2 iResolution;
            uniform vec4 iMouse;
			uniform sampler2DRect dummytex;
			uniform sampler2D iChannel0;
			uniform sampler2D iChannel1;
			uniform sampler2D iChannel2;
            uniform sampler2D iChannel3;
			uniform float r;
			uniform float g;
			uniform float b;
			
// <<<<<<<<< START SHADERTOY PASTE

			float DistLine(vec2 point, vec2 start, vec2 end){
    vec2 ps = point-start;
    vec2 startend = end - start;
    float t = clamp(dot(ps, startend)/dot(startend, startend), 0., 1.);
    return length(ps - startend*t);
}

float N21 (vec2 p) {
    p = fract(p*vec2(123.45, 987.65));
    p += dot(p, p+56.78);
    return fract(p.x*p.y);
}

vec2 N22 (vec2 p) {
    float n = N21(p);
    return vec2(n, N21(p+n));
}

vec2 GetPos(vec2 id, vec2 offset) {
    vec2 n = N22(id+offset)*iTime;
    
    return offset+sin(n)*.4;
}

float Line(vec2 p, vec2 a, vec2 b) {
    float d = DistLine(p, a, b);
    float m = smoothstep (0.03, 0.01, d);
    m *= smoothstep(1.2, .8, length(a-b));
    return m;
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{

    
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;

    float m = 0.;
    
    float lfo = (sin(iTime*0.15)+1.)+1.;
    uv *= 10.*lfo;
    
    vec2 gridUV = fract(uv) - 0.5; // 5 * 5 boxes with coordinates [-0.5;0.5]
    vec2 id = floor(uv);
    
    vec2 p[9];
    int i = 0;
    for(float y =-1.;y<=1.;y++) {
        for(float x=-1.;x<=1.;x++) {
           p[i++] = GetPos(id, vec2(x, y));
       }
    }
    
   
    
    for(int i = 0; i<9; i++){
        m+= Line(gridUV, p[4], p[i]);
        vec2 j = (p[i]-gridUV)* 40.;
        float sparkle = 1./dot(j, j);
        float t = iTime *5.;
        m += sparkle* (sin(t+p[i].x*10.)*.5+.5);
    }
    
    
    m+= Line(gridUV, p[1], p[3]);
    m+= Line(gridUV, p[1], p[5]);
    m+= Line(gridUV, p[7], p[3]);
    m+= Line(gridUV, p[7], p[5]);
    
    vec3 col = vec3(m*r, m*g, m*b);
    
    //if(gridUV.x > 0.48 || gridUV.y>0.48) {col = vec3(r,g,b);}
   
    fragColor = vec4(col, 1.0);
}

// <<<<<<<<< END SHADERTOY PASTE

			void main(void) {                
				mainImage(outColor, jit_in.texcoord.st);
			}
        ]]>
        </program>
    </language>
</jittershader>

<jittershader name="stripes">
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="texcoord" type="vec2" state="TEXCOORD" />
    <param name="iResolution" type="vec2" state="TEXDIM0" />
    <param name="iMouse" type="vec4" default="0 0 0 0" />
    <param name="iTime" type="float" default="0" />
	<param name="dummytex" type="int" default="0" />
	<param name="iChannel0" type="int" default="1" />
	<param name="iChannel1" type="int" default="2" />
	<param name="iChannel2" type="int" default="3" />
    <param name="iChannel3" type="int" default="4" />
    <param name="iR" type="float" default="0.0" />
	<param name="iG" type="float" default="0.0" />
	<param name="iB" type="float" default="0.0" />
    <language name="glsl" version="1.5">
        <bind param="modelViewProjectionMatrix" program="vp" />
        <bind param="textureMatrix0" program="vp" />
        <bind param="position" program="vp" />
        <bind param="texcoord" program="vp" />
        <bind param="iTime" program="fp" />
        <bind param="iMouse" program="fp" />
        <bind param="iResolution" program="fp" />
		<bind param="dummytex" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />
		<bind param="iChannel2" program="fp" />
        <bind param="iChannel3" program="fp" />
        <bind param="iR" program="fp" />
		<bind param="iG" program="fp" />
		<bind param="iB" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>      
        <program name="fp" type="fragment"  >
        <![CDATA[
            #version 330 core
            
            in jit_PerVertex {
                vec2 texcoord;
            } jit_in;
            out vec4 outColor;

            uniform float iTime;
            uniform vec2 iResolution;
            uniform vec4 iMouse;
			uniform sampler2DRect dummytex;
			uniform sampler2D iChannel0;
			uniform sampler2D iChannel1;
			uniform sampler2D iChannel2;
            uniform sampler2D iChannel3;

            uniform float iR;
			uniform float iG;
			uniform float iB;

// <<<<<<<<< START SHADERTOY PASTE

			void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    
    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;
    float t = iTime * .5;
    
    
    //uv *= mat2(cos(t), -sin(t), sin(t), cos(t));
    
    vec3 ro = vec3(0, 0, -1);
    vec3 lookat = mix(vec3(0,-.5,0), vec3(-1, .5, -1), sin(t*.56)*.5+.5);
    float zoom = mix(.2, .7, sin(t*0.97)*.5+.5);
    
    vec3 f = normalize(lookat-ro),
    r = normalize(cross(vec3(0,1,0), f)),
    u = cross(f,r),
    c = ro + f * zoom,
    i = c + uv.x * r + uv.y * u,
    rd = normalize(i-ro);
    
    float dS, dO;
    vec3 p;
    
    for (int i = 0; i < 100 ; i++) {
        p = ro + rd * dO;
        dS = -(length(vec2(length(p.xz)-1., p.y)) - .75); // generates a Torus
        if(dS<.001) break;
        dO += dS;
    }
    
    vec3 bg = vec3(0.);
    vec3 col = bg;
    vec3 highlight = vec3(iR,iG,iB);
    
    if(dS<.001){
    //polar coordinates
    float x = atan(p.x, p.z) + t; //-pi to pi
    float y = atan(length(p.xz)-1., p.y);
    
    float bands = sin(y*10.+ x*40.);
    float ripples = sin((x*10.+ -y*40.)*3.)*.5+.5;
    float waves = sin(x*1.+ -y*4.+t*5.);
    
    float b1 = smoothstep(-.2,.2, bands);
    float b2 = smoothstep(-.2,.2, bands-.5);
    
    float m = b1*(1.-b2);
    m = max(m,ripples*b2*max(0.,waves));
    m += max(0., waves*.3*b2);
    col += mix(m * highlight, (1. -m)*highlight, smoothstep(-.3, .3, sin(x*2.+t)));
    }
    
    
    fragColor = vec4(col, 1.0);
    
    
}
// <<<<<<<<< END SHADERTOY PASTE

			void main(void) {                
				mainImage(outColor, jit_in.texcoord.st);
			}
        ]]>
        </program>
    </language>
</jittershader>

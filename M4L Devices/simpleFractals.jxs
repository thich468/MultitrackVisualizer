<jittershader name="stripes">
    <param name="modelViewProjectionMatrix" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
    <param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
    <param name="position" type="vec3" state="POSITION" />
    <param name="texcoord" type="vec2" state="TEXCOORD" />
    <param name="iResolution" type="vec2" state="TEXDIM0" />
    <param name="iMouse" type="vec4" default="0 0 0 0" />
    <param name="iTime" type="float" default="0" />
	<param name="dummytex" type="int" default="0" />
	<param name="iChannel0" type="int" default="1" />
	<param name="iChannel1" type="int" default="2" />
	<param name="iChannel2" type="int" default="3" />
    <param name="iChannel3" type="int" default="4" />
	<param name="r" type="float" default="0.0" />
	<param name="g" type="float" default="0.0" />
	<param name="b" type="float" default="0.0" />
    <param name="iterations" type="float" default="16.0" />
    
    <language name="glsl" version="1.5">
        <bind param="modelViewProjectionMatrix" program="vp" />
        <bind param="textureMatrix0" program="vp" />
        <bind param="position" program="vp" />
        <bind param="texcoord" program="vp" />
        <bind param="iTime" program="fp" />
        <bind param="iMouse" program="fp" />
        <bind param="iResolution" program="fp" />
		<bind param="dummytex" program="fp" />
		<bind param="iChannel0" program="fp" />
		<bind param="iChannel1" program="fp" />
		<bind param="iChannel2" program="fp" />
        <bind param="iChannel3" program="fp" />
		<bind param="r" program="fp" />
		<bind param="g" program="fp" />
		<bind param="b" program="fp" />
        <bind param="iterations" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 position;
			in vec2 texcoord;
			out jit_PerVertex {
				vec2 texcoord;
			} jit_out;
			uniform mat4 modelViewProjectionMatrix;
			uniform mat4 textureMatrix0;
			
			void main(void) {
				gl_Position = modelViewProjectionMatrix*vec4(position, 1.);
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>      
        <program name="fp" type="fragment"  >
        <![CDATA[
            #version 330 core
            
            in jit_PerVertex {
                vec2 texcoord;
            } jit_in;
            out vec4 outColor;

            uniform float iTime;
            uniform vec2 iResolution;
            uniform vec4 iMouse;
			uniform sampler2DRect dummytex;
			uniform sampler2D iChannel0;
			uniform sampler2D iChannel1;
			uniform sampler2D iChannel2;
            uniform sampler2D iChannel3;
			uniform float r;
			uniform float g;
			uniform float b;
            uniform float iterations;
			
// <<<<<<<<< START SHADERTOY PASTE

			void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 normalizedCoord = fragCoord / iResolution.xy * 2.0 - 1.0; //[-1:1]
    
/**
    float r = 0.0;
    float g = 0.5;
    float b = 1.0;
**/
    
    float angle = iTime * 0.1;
    //float multiplier = 1.15 - 0.05 * sin(iTime*0.05);
    float dist = 0.5;
    for(float i = 0.0; i < iterations; i+= 1.0){
        normalizedCoord = abs(normalizedCoord);
        normalizedCoord -= dist;
        normalizedCoord *= 1.1 * iTime/(iTime-1.0);
        normalizedCoord *= mat2(
        cos(angle), -sin(angle),
        sin(angle), cos(angle)
        );
    }
    fragColor = vec4(length(normalizedCoord)*r,
    length(normalizedCoord)*g,
    length(normalizedCoord)*b,1.0);// Output to screen
}

// <<<<<<<<< END SHADERTOY PASTE

			void main(void) {                
				mainImage(outColor, jit_in.texcoord.st);
			}
        ]]>
        </program>
    </language>
</jittershader>
